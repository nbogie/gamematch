00_TODO
========

Write a merging import of meetup members into an existing db.  Add new fields to existing members (e.g. 'visited').
 - also try to get a new-members-since out of the meetup api:
  That should be possible with order=joined&desc=true but output from this doesn't seem reliable.
  We could also get the first few pages ordered by visited, desc, in order to get ids for who's active.

Speed up the player loads with pw_count and own_count.  E.g. cache these counts, perhaps generating them offline.

Support deletion of meetup-deleted users, in the merge... identified as any player whose meetup id does not come up in a FULL successfully completed import.

When players reload an event's page, if it has been deleted give them a better error message.  (They may reload an event page, or access a bookmark.)

Keep track of users who are active, or find this from meetup.  We need not suggest games with players who haven't been to a meetup in 2 years...
This might be enough: 'visited' on member#get: http://www.meetup.com/meetup_api/docs/2/member/#get


When comparing user with one (or more) other player(s), also show commonalities in your highly-rated (r >= 8)  games.

Add matches from up-and-coming LoBs

Consider importing all games from bgg in one pass (perhaps from a csv dump of all games). ( ~80k games? )

Permit import / refresh of a single event, and single user.

When showing a user's owned games which are most desired for play by others, prefer games that no one else owns.

check font support for non roman alphabet: e.g. 고병훈

DONE: 
=====
Show a user's most desired game

It is possible to have two copies of a game in your bgg collection.  
For now, I'll just ignore the second item (so if you only own the second one, the system will not record that you own the game at all).  This is simpler than merging.

Add indices and uniqueness constraints on the join tables.

In joining games with, and counting, play_wishes and ownerships, be sure not to 
accidentally exclude games with ZERO rows in owner or play_wishes.

When listing uniquely owned games, sort by pw_count DESC.

Games which are owned only by one or two players, which are popular
Game.joins(:ownerships).select('id, name, count(*) as c').group(:game_id).having('c <2')
->
SELECT id, name, count(*) as c FROM "games" INNER JOIN "ownerships" ON "ownerships"."game_id" = "games"."id" GROUP BY "game_id" HAVING c <2

